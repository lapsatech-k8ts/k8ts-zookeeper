#!/usr/bin/env bash

function die() {
  test "x$1" == "x" || >&2 echo "$1"
  exit 1
}

function requred_var() {
  die "$1 var is required"
}

function create_java_env() {
  local _path=$1
  cat <<EOF > ${_path}
#This file was autogenerated DO NOT EDIT
ZOO_LOG_DIR=$(mktemp -d)
JVMFLAGS="-Xmx${MEMORY_HEAP} -Xms${MEMORY_HEAP}"
EOF
  echo "${_path} created"
}

function create_log4j_props() {
  local _path=$1
  cat <<EOF > ${_path}
#This file was autogenerated DO NOT EDIT
zookeeper.root.logger=CONSOLE
zookeeper.console.threshold=${LOG_LEVEL}
log4j.rootLogger=\${zookeeper.root.logger}
log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender
log4j.appender.CONSOLE.Threshold=\${zookeeper.console.threshold}
log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout
log4j.appender.CONSOLE.layout.ConversionPattern=%d{ISO8601} [myid:%X{myid}] - %-5p [%t:%C{1}@%L] - %m%n
EOF
  echo "${_path} created"
}

function create_logback_xml() {
  local _path=$1
  cat <<EOF > ${_path}
<configuration>

    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <layout class="ch.qos.logback.classic.PatternLayout">
            <Pattern>
                %d{ISO8601} [myid:%X{myid}] - %-5p [%t:%C{1}@%L] - %m%n
            </Pattern>
        </layout>
    </appender>

    <root level="${LOG_LEVEL}">
        <appender-ref ref="CONSOLE"/>
    </root>

</configuration>
EOF
  echo "${_path} created"
}

function create_zoo_cfg() {
  local _path=$1
  cat <<EOF > ${_path}
#This file was autogenerated DO NOT EDIT
clientPort=$CLIENT_PORT
dataDir=$DATA_DIR
dataLogDir=$DATALOG_DIR
tickTime=$TICK_TIME
initLimit=$INIT_LIMIT
syncLimit=$SYNC_LIMIT
maxClientCnxns=$MAX_CLIENT_CNXNS
minSessionTimeout=$MIN_SESSION_TIMEOUT
maxSessionTimeout=$MAX_SESSION_TIMEOUT
autopurge.snapRetainCount=$SNAP_RETAIN_COUNT
autopurge.purgeInteval=$PURGE_INTERVAL
4lw.commands.whitelist=*
EOF

  if [ $DEPLOYMENT_NODES_COUNT -gt 1 ]; then
    for (( i=1; i<=$DEPLOYMENT_NODES_COUNT; i++ ))
    do
      echo "server.$i=${NODE_NAME_PREFIX}-$((i-1)).$NODE_DOMAIN:$SERVER_PORT:$ELECTION_PORT" >> ${_path}
    done
  fi
  echo "${_path} created"
}

function create_my_id() {
  local _path=$1
  test -f "${_path}" || {
    echo $((NODE_INDEX+1)) > ${_path}
    echo "${_path} created"
  }
}

function create_dirs() {
  mkdir -vp "${DATA_DIR}"
}

CLIENT_PORT=${DEPLOYMENT_CLIENT_PORT:-2181}
ELECTION_PORT=${DEPLOYMENT_ELECTION_PORT:-3888}
SERVER_PORT=${DEPLOYMENT_SERVER_PORT:-2888}

TICK_TIME=${DEPLOYMENT_TICK_TIME:-2000}
INIT_LIMIT=${DEPLOYMENT_INIT_LIMIT:-10}
SYNC_LIMIT=${DEPLOYMENT_SYNC_LIMIT:-5}

MIN_SESSION_TIMEOUT=${DEPLOYMENT_MIN_SESSION_TIMEOUT:-$((TICK_TIME*2))}
MAX_SESSION_TIMEOUT=${DEPLOYMENT_MAX_SESSION_TIMEOUT:-$((TICK_TIME*20))}
SNAP_RETAIN_COUNT=${DEPLOYMENT_SNAP_RETAIN_COUNT:-3}
PURGE_INTERVAL=${DEPLOYMENT_PURGE_INTERVAL:-12}
LOG_LEVEL=${DEPLOYMENT_LOG_LEVEL:-INFO}
MAX_CLIENT_CNXNS=${DEPLOYMENT_MAX_CLIENT_CNXNS:-60}
SNAP_RETAIN_COUNT=${DEPLOYMENT_SNAP_RETAIN_COUNT:-3}

MEMORY_HEAP=${DEPLOYMENT_MEMORY_HEAP:-2G}

DATA_DIR=${DEPLOYMENT_DATA_DIR:-$(requred_var DEPLOYMENT_DATA_DIR)} || die
DATALOG_DIR=${DEPLOYMENT_DATALOG_DIR:-$(requred_var DEPLOYMENT_DATALOG_DIR)} || die

NODE_HOST=`hostname -s`
NODE_DOMAIN=`hostname -d`

if [[ $NODE_HOST =~ (.*)-([0-9]+)$ ]]; then
    NODE_NAME_PREFIX=${BASH_REMATCH[1]}
    NODE_INDEX=${BASH_REMATCH[2]}
else
    die "Fialed to parse name and ordinal of host from the name of the host '${NODE_HOST}'"
fi

# launch

CONFIG_DIR=$(mktemp -d)
ZOO_CFG_PATH=${CONFIG_DIR}/zoo.cfg
JAVA_ENV_PATH=${CONFIG_DIR}/java.env
LOGBACK_XML_PATH=${CONFIG_DIR}/logback.xml
MYID_PATH=${DATA_DIR}/myid

true \
   && create_dirs \
   && create_zoo_cfg ${ZOO_CFG_PATH} \
   && create_java_env ${JAVA_ENV_PATH} \
   && create_logback_xml ${LOGBACK_XML_PATH} \
   && create_my_id ${MYID_PATH} \
   \
   && echo "--------- ${ZOO_CFG_PATH} ---------" \
   && cat ${ZOO_CFG_PATH} \
   \
   && echo "--------- ${JAVA_ENV_PATH} ---------" \
   && cat ${JAVA_ENV_PATH} \
   \
   && echo "--------- ${LOGBACK_XML_PATH} ---------" \
   && cat ${LOGBACK_XML_PATH} \
   \
   && echo "--------- ${MYID_PATH} ---------" \
   && cat ${MYID_PATH} \
   \
   && echo "---------------------------------------" \
   && echo "Starting zkServer.sh --config ${CONFIG_DIR} start-foreground" \
   && exec zkServer.sh --config ${CONFIG_DIR} start-foreground \
   && true
